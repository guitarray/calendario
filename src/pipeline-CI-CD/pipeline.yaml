apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: calendario-pipeline
  namespace: raimondopd-dev
spec:
  params:
    - name: git-url
      type: string
      default: https://github.com/guitarray/calendario.git
    - name: git-revision
      type: string
      default: main
    - name: image-url
      type: string
      default: image-registry.openshift-image-registry.svc:5000/raimondopd-dev/calendario:latest

  workspaces:
    - name: shared-workspace

  tasks:
    # 1Ô∏è‚É£ Clona il repository (inline)
    - name: clone
      taskSpec:
        workspaces:
          - name: output
        params:
          - name: url
            type: string
          - name: revision
            type: string
        steps:
          - name: git-clone
            image: alpine/git
            workingDir: /workspace/output
            script: |
              echo "üîÑ Cloning repository $(params.url) branch $(params.revision)"
              rm -rf /workspace/output/*
              git clone -b $(params.revision) $(params.url) /workspace/output
              echo "‚úÖ Clone completed"
      params:
        - name: url
          value: $(params.git-url)
        - name: revision
          value: $(params.git-revision)
      workspaces:
        - name: output
          workspace: shared-workspace

    # 2Ô∏è‚É£ Installazione dipendenze e build/test
    - name: npm-build
      runAfter: [clone]
      taskSpec:
        workspaces:
          - name: output
        steps:
          - name: install
            image: node:20
            workingDir: /workspace/output
            script: |
              echo "üìÇ Contenuto della cartella:"
              ls -la
              if [ ! -f package.json ]; then
                echo "‚ùå ERRORE: package.json non trovato!"
                exit 1
              fi
              echo "üì¶ Installazione dipendenze..."
              npm install
              echo "üèóÔ∏è Build del progetto..."
              npm run build || echo "‚ö†Ô∏è Build fallita, ma continuiamo..."
              npm test || echo "‚ö†Ô∏è Test falliti, ma continuiamo..."
      workspaces:
        - name: output
          workspace: shared-workspace

    # 3Ô∏è‚É£ Analisi SonarCloud
    - name: sonar-analysis
      runAfter: [npm-build]
      taskSpec:
        workspaces:
          - name: output
        steps:
          - name: sonar
            image: sonarsource/sonar-scanner-cli:latest
            workingDir: /workspace/output
            script: |
              echo "üîé Avvio analisi SonarCloud..."
              sonar-scanner \
                -Dsonar.projectKey=calendario \
                -Dsonar.sources=. \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.login=$(SONAR_TOKEN)
            env:
              - name: SONAR_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: sonar-secret
                    key: token
      workspaces:
        - name: output
          workspace: shared-workspace

    # 4Ô∏è‚É£ Build immagine container con Buildah
    - name: build-image
